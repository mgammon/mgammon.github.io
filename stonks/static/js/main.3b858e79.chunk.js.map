{"version":3,"sources":["FileParser.ts","PositionsTable.tsx","metrics.ts","Performance.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TradeHistoryRows","round","number","decimals","Math","pow","parseTos","file","Promise","resolve","_reject","papa","parse","complete","results","rows","data","start","findIndex","row","end","i","length","tradeHistoryRows","slice","map","date","Date","side","qty","abs","parseInt","symbol","price","parseFloat","orderType","getPositions","trades","groupedBySymbol","_","t","positions","Object","keys","forEach","sort","a","b","getTime","positionTrades","trade","push","reduce","sortPosition","sortBy","ascending","value","localeCompare","holdTime","profitAmount","profitPercent","PositionsTable","props","state","this","setState","bind","className","name","onClick","onSort","open","close","buys","filter","sells","avgBuyPrice","averagePrice","avgSellPrice","shares","sum","formatDateTime","holdTimeString","formatCurrency","formatPercent","renderTrades","React","Component","sorted","timeDiff","moment","diff","minutes","floor","seconds","getWinsAndLosses","acc","position","profit","numWon","amountWon","numLost","amountLost","accuracy","average","numbers","total","num","plRatio","format","amount","maxDecimals","toString","split","dollars","dollarSignificantDigits","maximumSignificantDigits","Intl","NumberFormat","style","currency","percent","Performance","avgBuy","App","dates","showCalendar","e","target","files","dateString","startString","endString","fontSize","margin","padding","borderRadius","background","stopPropagation","onDatesChanged","selectRange","maxDate","onChange","tileClassName","args","view","dateKey","year","toDate","console","log","month","add","htmlFor","dateFilteredTrades","type","id","onFileChange","renderDates","renderMessage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b858e79.chunk.js","sourcesContent":["import papa from \"papaparse\";\n\nexport interface Trade {\n  date: Date;\n  side: \"BUY\" | \"SELL\";\n  qty: number;\n  symbol: string;\n  price: number;\n  orderType: \"LMT\" | \"MKT\" | \"STP\";\n}\n\nconst TRADE_HISTORY_HEADER = \"Account Trade History\";\n\nenum TradeHistoryRows {\n  date = 1,\n  side = 3,\n  qty = 4,\n  symbol = 6,\n  price = 10,\n  orderType = 12,\n}\n\nexport function round(number: number, decimals: number) {\n  return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n\nexport function parseTos(file: File) {\n  return new Promise<Trade[]>((resolve, _reject) => {\n    papa.parse(file, {\n      complete: (results) => {\n        const rows = results.data as any[];\n        const start =\n          rows.findIndex((row) => row[0] === TRADE_HISTORY_HEADER) + 2;\n        const end = rows.findIndex((row, i) => i > start && row.length === 1);\n        const tradeHistoryRows = rows.slice(start, end);\n\n        resolve(\n          tradeHistoryRows.map((row) => ({\n            date: new Date(row[TradeHistoryRows.date]),\n            side: row[TradeHistoryRows.side],\n            qty: Math.abs(parseInt(row[TradeHistoryRows.qty], 10)),\n            symbol: row[TradeHistoryRows.symbol],\n            price: round(parseFloat(row[TradeHistoryRows.price]), 4),\n            orderType: row[TradeHistoryRows.orderType],\n          }))\n        );\n      },\n    });\n  });\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Trade } from \"./FileParser\";\nimport {\n  formatCurrency,\n  formatDateTime,\n  formatPercent,\n  holdTime,\n  profitPercent,\n  profitAmount,\n  averagePrice,\n  holdTimeString,\n} from \"./metrics\";\nimport * as _ from \"lodash\";\nimport { sortBy } from \"lodash\";\n\ninterface Props {\n  trades: Trade[];\n}\n\ninterface State {\n  sortBy: string;\n  ascending: boolean;\n}\n\nexport interface MatchedTrade {\n  buy: Trade;\n  sell: Trade;\n}\n\nexport function getPositions(trades: Trade[]) {\n  const groupedBySymbol = _.groupBy(trades, (t) => t.symbol);\n  const positions: Trade[][] = [];\n\n  Object.keys(groupedBySymbol).forEach((symbol) => {\n    const trades = groupedBySymbol[symbol].sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    let positionTrades: Trade[] = [];\n    trades.forEach((trade) => {\n      positionTrades.push(trade);\n      const positionSize = positionTrades.reduce(\n        (qty, t) => qty + (t.side === \"SELL\" ? -1 : 1) * t.qty,\n        0\n      );\n      if (positionSize === 0) {\n        positions.push(positionTrades);\n        positionTrades = [];\n      }\n    });\n  });\n\n  return positions;\n}\n\nfunction sortPosition(\n  sortBy: string,\n  ascending: boolean,\n  a: Trade[],\n  b: Trade[]\n) {\n  let value: number;\n  if (sortBy === \"Symbol\") {\n    value = a[0].symbol.localeCompare(b[0].symbol);\n  } else if (sortBy === \"Open\") {\n    value = a[0].date.getTime() - b[0].date.getTime();\n  } else if (sortBy === \"Close\") {\n    value = a[a.length - 1].date.getTime() - b[b.length - 1].date.getTime();\n  } else if (sortBy === \"Duration\") {\n    value = holdTime(a) - holdTime(b);\n  } else if (sortBy === \"Profit ($)\") {\n    value = profitAmount(a) - profitAmount(b);\n  } else if (sortBy === \"Profit (%)\") {\n    value = profitPercent(a) - profitPercent(b);\n  } else {\n    value = 0;\n  }\n\n  if (!ascending) {\n    return value * -1;\n  }\n  return value;\n}\n\nexport default class PositionsTable extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = { sortBy: \"Open\", ascending: false };\n  }\n\n  onSort(sortBy: string) {\n    this.setState({\n      sortBy,\n      ascending:\n        this.state.sortBy === sortBy\n          ? !this.state.ascending\n          : false,\n    });\n  }\n\n  renderTrades() {\n    const positions = getPositions(this.props.trades).sort(\n      sortPosition.bind(this, this.state.sortBy, this.state.ascending)\n    );\n\n    return (\n      <table className=\"matched-trades\">\n        <tr>\n          {[\n            \"Symbol\",\n            \"Open\",\n            \"Close\",\n            \"Duration\",\n            \"Shares\",\n            \"Buy Price\",\n            \"Sell Price\",\n            \"Profit ($)\",\n            \"Profit (%)\",\n          ].map((name) => (\n            <th\n              key={name}\n              className={\"sortable\"}\n              onClick={() => this.onSort(name)}\n            >\n              {name}\n              <span\n                className={\n                  this.state.sortBy === name\n                    ? this.state.ascending\n                      ? \"up\"\n                      : \"down\"\n                    : \"none\"\n                }\n              >\n                &uarr;\n              </span>\n            </th>\n          ))}\n        </tr>\n        {positions.map((trades, i) => {\n          const open = trades[0];\n          const close = trades[trades.length - 1];\n\n          const buys = trades.filter((t) => t.side === \"BUY\");\n          const sells = trades.filter((t) => t.side === \"SELL\");\n\n          const avgBuyPrice = averagePrice(buys);\n          const avgSellPrice = averagePrice(sells);\n\n          const shares = buys.reduce((sum, t) => sum + t.qty, 0);\n\n          return (\n            <tr key={i}>\n              <td>{open.symbol}</td>\n              <td className=\"small-font\">{formatDateTime(open.date)}</td>\n              <td className=\"small-font\">{formatDateTime(close.date)}</td>\n              <td>{holdTimeString(trades)}</td>\n              <td>{shares}</td>\n              <td>{formatCurrency(avgBuyPrice)}</td>\n              <td>{formatCurrency(avgSellPrice)}</td>\n              <td>{formatCurrency(profitAmount(trades))}</td>\n              <td>{formatPercent(profitPercent(trades))}</td>\n            </tr>\n          );\n        })}\n      </table>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Positions</h3>\n        {this.renderTrades()}\n      </div>\n    );\n  }\n}\n","import { round } from \"lodash\";\r\nimport moment from \"moment\";\r\nimport { Trade } from \"./FileParser\";\r\nimport { getPositions } from \"./PositionsTable\";\r\n\r\nexport function holdTimeString(trades: Trade[]) {\r\n  const sorted = trades.sort((a, b) => a.date.getTime() - b.date.getTime());\r\n  const open = sorted[0];\r\n  const close = sorted[sorted.length - 1];\r\n  const timeDiff = moment(close.date).diff(moment(open.date)) / 1000;\r\n  const minutes = timeDiff >= 60 ? `${Math.floor(timeDiff / 60)}m` : \"\";\r\n  const seconds = timeDiff % 60 ? `${Math.floor(timeDiff % 60)}s` : \"\";\r\n  return `${minutes} ${seconds}`;\r\n}\r\n\r\nexport function holdTime(trades: Trade[]) {\r\n  const sorted = trades.sort((a, b) => a.date.getTime() - b.date.getTime());\r\n  const open = sorted[0];\r\n  const close = sorted[sorted.length - 1];\r\n  return moment(close.date).diff(moment(open.date)) / 1000;\r\n}\r\n\r\nexport function getWinsAndLosses(trades: Trade[]) {\r\n  const positions = getPositions(trades);\r\n  return positions.reduce(\r\n    (acc, position) => {\r\n      const profit = profitAmount(position);\r\n      if (profit > 0) {\r\n        acc.numWon++;\r\n        acc.amountWon += profit;\r\n      } else if (profit < 0) {\r\n        acc.numLost++;\r\n        acc.amountLost += Math.abs(profit);\r\n      }\r\n      return acc;\r\n    },\r\n    { numWon: 0, numLost: 0, amountWon: 0, amountLost: 0 }\r\n  );\r\n}\r\n\r\nexport function accuracy(trades: Trade[]) {\r\n  const { numWon, numLost } = getWinsAndLosses(trades);\r\n  return numWon / (numWon + numLost);\r\n}\r\n\r\nexport function average(numbers: number[]) {\r\n  if (!numbers || numbers.length === 0) {\r\n    return null;\r\n  }\r\n  const total = numbers.reduce((sum, num) => sum + num, 0);\r\n\r\n  if (!total) {\r\n    return null;\r\n  }\r\n\r\n  return total / numbers.length;\r\n}\r\n\r\nexport function averagePrice(trades: Trade[]) {\r\n  return (\r\n    (average(trades.map((t) => t.price * t.qty)) as number) /\r\n    (average(trades.map((t) => t.qty)) as number)\r\n  );\r\n}\r\n\r\nexport function plRatio(trades: Trade[]) {\r\n  const { amountWon, numWon, amountLost, numLost } = getWinsAndLosses(trades);\r\n  return amountWon / numWon / (amountLost / numLost);\r\n}\r\n\r\nexport function profitAmount(trades: Trade[]) {\r\n  return trades.reduce(\r\n    (profit, t) => (t.side === \"BUY\" ? -1 : 1) * t.qty * t.price + profit,\r\n    0\r\n  );\r\n}\r\n\r\nexport function profitPercent(trades: Trade[]) {\r\n  const avgBuyPrice = averagePrice(trades.filter((t) => t.side === \"BUY\"));\r\n  const profit = profitAmount(trades);\r\n  return profit / avgBuyPrice;\r\n}\r\n\r\nexport function formatDateTime(date: Date) {\r\n  return moment(date).format(\"M/D/YY h:mm:ss\");\r\n}\r\n\r\nexport function formatCurrency(amount: number, maxDecimals: number = 4) {\r\n  const [dollars] = Math.abs(amount).toString().split(\".\");\r\n  const dollarSignificantDigits = dollars !== \"0\" ? dollars.length : 1;\r\n  const maximumSignificantDigits = dollarSignificantDigits + maxDecimals;\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    maximumSignificantDigits,\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  }).format(amount);\r\n}\r\n\r\nexport function formatPercent(percent: number) {\r\n  return `${round(percent * 100, 2)}%`;\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { round, Trade } from \"./FileParser\";\nimport { matchTrades } from \"./MatchedTradesTable\";\nimport {\n  accuracy,\n  average,\n  averagePrice,\n  formatCurrency,\n  formatPercent,\n  getWinsAndLosses,\n  plRatio,\n  profitAmount,\n  profitPercent,\n} from \"./metrics\";\n\ninterface Props {\n  trades: Trade[];\n}\nexport default class Performance extends React.Component<Props, {}> {\n  render() {\n    const { trades } = this.props;\n\n    const avgBuy = averagePrice(\n      this.props.trades.filter((t) => t.side === \"BUY\")\n    );\n\n    return (\n      <div>\n        <h3>Performance</h3>\n        <table className=\"performance\">\n          <tr>\n            <th>Profit ($)</th>\n            <td>{formatCurrency(profitAmount(trades), 2)}</td>\n            <th>Accuracy (%)</th>\n            <td>{formatPercent(accuracy(trades))}</td>\n            <th>Wins </th>\n            <td>{getWinsAndLosses(trades).numWon}</td>\n            <th>Average Position Size ($) </th>\n            <td>{formatCurrency(avgBuy as number)}</td>\n          </tr>\n          <tr>\n            <th>Profit (%)</th>\n            <td>{formatPercent(profitPercent(trades))}</td>\n            <th>P/L Ratio </th>\n            <td>{round(plRatio(trades), 2)}</td>\n            <th>Losses </th>\n            <td>{getWinsAndLosses(trades).numLost}</td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent } from \"react\";\nimport \"./App.css\";\nimport { parseTos, Trade } from \"./FileParser\";\nimport MatchedTradesTable from \"./MatchedTradesTable\";\nimport Performance from \"./Performance\";\nimport PositionsTable from \"./PositionsTable\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport moment from \"moment\";\nimport { profitAmount } from \"./metrics\";\n\ninterface State {\n  dates: [Date, Date] | null;\n  trades: Trade[];\n  showCalendar: boolean;\n}\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      trades: [],\n      dates: null,\n      showCalendar: false,\n    };\n  }\n\n  async onFileChange(e: ChangeEvent<HTMLInputElement>) {\n    if (!e.target.files || e.target.files.length === 0) {\n      return;\n    }\n\n    const file = e.target.files[0];\n    const trades = await parseTos(file);\n    this.setState({ trades });\n  }\n\n  async onDatesChanged(dates: [Date, Date] | null) {\n    this.setState({ dates, showCalendar: false });\n  }\n\n  renderDates() {\n    let dateString = \"Filter by dates\";\n\n    if (this.state.dates) {\n      const startString = moment(this.state.dates[0]).format(\"MMM Do, YYYY\");\n      const endString = moment(this.state.dates[1]).format(\"MMM Do, YYYY\");\n      if (startString === endString) {\n        dateString = startString;\n      } else {\n        dateString = `${startString} - ${endString}`;\n      }\n    }\n    const button = (\n      <button\n        className=\"dates\"\n        onClick={(e) => {\n          this.setState({ showCalendar: !this.state.showCalendar });\n        }}\n      >\n        {dateString}\n        <span\n          className=\"link\"\n          style={{\n            fontSize: \"0.6em\",\n            margin: \"1em\",\n            padding: \"0.25em\",\n            borderRadius: \"0.4em\",\n            background: \"white\",\n          }}\n          onClick={(e) => {\n            e.stopPropagation();\n            this.onDatesChanged(null);\n          }}\n        >\n          Reset\n        </span>\n      </button>\n    );\n\n    const calendar = this.state.showCalendar ? (\n      <div style={{ position: \"fixed\" }}>\n        <Calendar\n          selectRange={true}\n          maxDate={new Date()}\n          onChange={(date: unknown) =>\n            this.onDatesChanged(date as [Date, Date])\n          }\n          value={this.state.dates}\n          tileClassName={(args) => {\n            const { date, view } = args;\n            const tileKey = this.dateKey(date, view);\n            const start = date.getTime();\n            let end: number;\n            if (view === \"decade\") {\n              end = moment(date)\n                .year(moment(date).year() + 1)\n                .toDate()\n                .getTime();\n              console.log(\"decade!\", start, end);\n            } else if (view === \"year\") {\n              end = moment(date)\n                .month(moment(date).month() + 1)\n                .toDate()\n                .getTime();\n            } else if (view === \"month\") {\n              end = moment(date).add(1, \"day\").toDate().getTime();\n            }\n\n            const profit = profitAmount(\n              this.state.trades.filter(\n                (t) => t.date.getTime() > start && t.date.getTime() < end\n              )\n            );\n\n            console.log(profit);\n\n            if (profit > 0) {\n              return \"green\";\n            } else if (profit < 0) {\n              return \"red\";\n            }\n            return null;\n          }}\n        />\n      </div>\n    ) : null;\n\n    return [button, calendar];\n  }\n\n  dateKey(date: Date, view: string) {\n    if (view === \"decade\") {\n      return moment(date).format(\"YYYY\");\n    } else if (view === \"year\") {\n      return moment(date).format(\"M YYYY\");\n    } else if (view === \"month\") {\n      return moment(date).format(\"M/D/YYYY\");\n    } else {\n      return null;\n    }\n  }\n\n  renderMessage() {\n    if (!this.state.trades.length) {\n      return (\n        <h3>\n          <label htmlFor=\"file\" className=\"link\">\n            Upload a CSV\n          </label>{\" \"}\n          to get started\n        </h3>\n      );\n    }\n  }\n\n  render() {\n    const dateFilteredTrades = this.state.trades.filter(\n      (t) =>\n        this.state.dates === null ||\n        (t.date.getTime() > this.state.dates[0].getTime() &&\n          t.date.getTime() < this.state.dates[1].getTime())\n    );\n    return (\n      <div>\n        <label htmlFor=\"file\" className=\"file\">\n          Upload CSV\n        </label>\n        <input type=\"file\" id=\"file\" onChange={(e) => this.onFileChange(e)} />\n        {this.renderDates()}\n\n        {this.state.trades.length\n          ? [\n              <Performance trades={dateFilteredTrades} />,\n              // <MatchedTradesTable trades={dateFilteredTrades} />,\n              <PositionsTable trades={dateFilteredTrades} />,\n            ]\n          : this.renderMessage()}\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}