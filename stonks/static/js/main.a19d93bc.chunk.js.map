{"version":3,"sources":["FileParser.ts","metrics.ts","MatchedTradesTable.tsx","Performance.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TradeHistoryRows","round","number","decimals","Math","pow","parseTos","file","Promise","resolve","_reject","papa","parse","complete","results","rows","data","start","findIndex","row","end","i","length","tradeHistoryRows","slice","map","date","Date","side","qty","parseInt","symbol","price","parseFloat","orderType","holdTime","match","timeDiff","moment","sell","diff","buy","minutes","floor","seconds","getMatchTotals","matches","reduce","acc","abs","getWinsAndLosses","numWon","amountWon","numLost","amountLost","accuracy","plRatio","profitAmount","totals","profitPercent","avgBuy","formatDateTime","format","formatCurrency","amount","maxDecimals","toString","split","dollars","dollarSignificantDigits","maximumSignificantDigits","Intl","NumberFormat","style","currency","formatPercent","percent","matchTrades","trades","sortedTrades","sort","a","b","getTime","buyIndex","t","sellIndex","splice","push","MatchedTradesTable","this","props","className","renderTrades","React","Component","Performance","numbers","total","sum","num","average","m","App","state","dates","showCalendar","e","target","files","setState","dateString","startString","endString","onClick","fontSize","margin","padding","borderRadius","background","stopPropagation","onDatesChanged","position","selectRange","maxDate","onChange","value","htmlFor","dateFilteredTrades","filter","type","id","onFileChange","renderDates","renderMessage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a19d93bc.chunk.js","sourcesContent":["import papa from \"papaparse\";\n\nexport interface Trade {\n  date: Date;\n  side: \"BUY\" | \"SELL\";\n  qty: number;\n  symbol: string;\n  price: number;\n  orderType: \"LMT\" | \"MKT\" | \"STP\";\n}\n\nconst TRADE_HISTORY_HEADER = \"Account Trade History\";\n\nenum TradeHistoryRows {\n  date = 1,\n  side = 3,\n  qty = 4,\n  symbol = 6,\n  price = 10,\n  orderType = 12,\n}\n\nexport function round(number: number, decimals: number) {\n  return Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}\n\nexport function parseTos(file: File) {\n  return new Promise<Trade[]>((resolve, _reject) => {\n    papa.parse(file, {\n      complete: (results) => {\n        const rows = results.data as any[];\n        const start =\n          rows.findIndex((row) => row[0] === TRADE_HISTORY_HEADER) + 2;\n        const end = rows.findIndex((row, i) => i > start && row.length === 1);\n        const tradeHistoryRows = rows.slice(start, end);\n\n        resolve(\n          tradeHistoryRows.map((row) => ({\n            date: new Date(row[TradeHistoryRows.date]),\n            side: row[TradeHistoryRows.side],\n            qty: parseInt(row[TradeHistoryRows.qty], 10),\n            symbol: row[TradeHistoryRows.symbol],\n            price: round(parseFloat(row[TradeHistoryRows.price]), 4),\n            orderType: row[TradeHistoryRows.orderType],\n          }))\n        );\n      },\n    });\n  });\n}\n","import { round } from \"lodash\";\r\nimport moment from \"moment\";\r\n\r\nimport { MatchedTrade } from \"./MatchedTradesTable\";\r\n\r\nexport function holdTime(match: MatchedTrade) {\r\n  const timeDiff = moment(match.sell.date).diff(moment(match.buy.date)) / 1000;\r\n  const minutes = timeDiff >= 60 ? `${Math.floor(timeDiff / 60)}m` : \"\";\r\n  const seconds = timeDiff % 60 ? `${Math.floor(timeDiff % 60)}s` : \"\";\r\n  return `${minutes} ${seconds}`;\r\n}\r\n\r\nfunction getMatchTotals(matches: MatchedTrade[]) {\r\n  return matches.reduce(\r\n    (acc, match) => {\r\n      acc.buy += match.buy.price * match.buy.qty;\r\n      acc.sell += Math.abs(match.sell.price * match.sell.qty);\r\n      return acc;\r\n    },\r\n    { buy: 0, sell: 0 }\r\n  );\r\n}\r\n\r\nexport function getWinsAndLosses(matches: MatchedTrade[]) {\r\n  return matches.reduce(\r\n    (acc, match) => {\r\n      if (match.sell.price > match.buy.price) {\r\n        acc.numWon++;\r\n        acc.amountWon += (match.sell.price - match.buy.price) * match.buy.qty;\r\n      } else if (match.sell.price < match.buy.price) {\r\n        acc.numLost++;\r\n        acc.amountLost += Math.abs(\r\n          (match.sell.price - match.buy.price) * match.buy.qty\r\n        );\r\n      }\r\n      return acc;\r\n    },\r\n    { numWon: 0, numLost: 0, amountWon: 0, amountLost: 0 }\r\n  );\r\n}\r\n\r\nexport function accuracy(matches: MatchedTrade[]) {\r\n  const { numWon, numLost } = getWinsAndLosses(matches);\r\n  return numWon / (numWon + numLost);\r\n}\r\n\r\nexport function average(numbers: number[]) {\r\n  if (!numbers || numbers.length === 0) {\r\n    return null;\r\n  }\r\n  const total = numbers.reduce((sum, num) => sum + num, 0);\r\n\r\n  if (!total) {\r\n    return null;\r\n  }\r\n\r\n  return total / numbers.length;\r\n}\r\n\r\nexport function plRatio(matches: MatchedTrade[]) {\r\n  const { amountWon, numWon, amountLost, numLost } = getWinsAndLosses(matches);\r\n  return amountWon / numWon / (amountLost / numLost);\r\n}\r\n\r\nexport function profitAmount(matches: MatchedTrade[]) {\r\n  const totals = getMatchTotals(matches);\r\n  return totals.sell - totals.buy;\r\n}\r\n\r\nexport function profitPercent(matches: MatchedTrade[]) {\r\n  const totals = getMatchTotals(matches);\r\n  const avgBuy = totals.buy / matches.length;\r\n\r\n  return (totals.sell - totals.buy) / avgBuy;\r\n}\r\n\r\nexport function formatDateTime(date: Date) {\r\n  return moment(date).format(\"M/D/YY h:mm:ss\");\r\n}\r\n\r\nexport function formatCurrency(amount: number, maxDecimals: number = 4) {\r\n  const [dollars] = Math.abs(amount).toString().split(\".\");\r\n  const dollarSignificantDigits = dollars !== \"0\" ? dollars.length : 1;\r\n  const maximumSignificantDigits = dollarSignificantDigits + maxDecimals;\r\n  return new Intl.NumberFormat(\"en-US\", {\r\n    maximumSignificantDigits,\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  }).format(amount);\r\n}\r\n\r\nexport function formatPercent(percent: number) {\r\n  return `${round(percent * 100, 2)}%`;\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Trade } from \"./FileParser\";\nimport {\n  formatCurrency,\n  formatDateTime,\n  formatPercent,\n  holdTime,\n  profitPercent,\n  profitAmount,\n} from \"./metrics\";\n\ninterface Props {\n  trades: Trade[];\n}\n\nexport interface MatchedTrade {\n  buy: Trade;\n  sell: Trade;\n}\n\nexport function matchTrades(trades: Trade[]) {\n  const sortedTrades = [...trades].sort(\n    (a, b) => a.date.getTime() - b.date.getTime()\n  );\n\n  const matches: { buy: Trade; sell: Trade }[] = [];\n\n  while (sortedTrades.length) {\n    // Find the first buy trade\n    const buyIndex = sortedTrades.findIndex((t) => t.side === \"BUY\");\n    const buy = sortedTrades[buyIndex];\n\n    // If there's no more buys, we out.\n    if (!buy) {\n      break;\n    }\n\n    // Match it up to the next sell trade of the same symbol\n    const sellIndex = sortedTrades.findIndex(\n      (t) =>\n        t.side === \"SELL\" &&\n        t.symbol === buy.symbol &&\n        Math.abs(t.qty) === buy.qty\n    );\n    const sell = sortedTrades[sellIndex];\n\n    // If there's no matching sell, throw away the buy.\n    if (!sell) {\n      sortedTrades.splice(buyIndex, 1);\n      continue;\n    }\n\n    // Remove the matching trades\n    sortedTrades.splice(buyIndex, 1);\n    sortedTrades.splice(sellIndex - 1, 1);\n\n    matches.push({ buy, sell });\n  }\n\n  return matches;\n}\n\nexport default class MatchedTradesTable extends React.Component<Props, {}> {\n  renderTrades() {\n    const matches = matchTrades(this.props.trades);\n\n    return (\n      <table className=\"matched-trades\">\n        <tr>\n          <th>Symbol</th>\n          <th>Buy Time</th>\n          <th>Sell Time</th>\n          <th>Duration</th>\n          <th>Shares</th>\n          <th>Buy Price</th>\n          <th>Sell Price</th>\n          <th>Profit ($)</th>\n          <th>Profit (%)</th>\n        </tr>\n        {matches.map((match, i) => {\n          const { buy, sell } = match;\n\n          return (\n            <tr key={i}>\n              <td>{buy.symbol}</td>\n              <td className=\"small-font\">{formatDateTime(buy.date)}</td>\n              <td className=\"small-font\">{formatDateTime(sell.date)}</td>\n              <td>{holdTime(match)}</td>\n              <td>{buy.qty}</td>\n              <td>{formatCurrency(buy.price)}</td>\n              <td>{formatCurrency(sell.price)}</td>\n              <td>{formatCurrency(profitAmount([match]))}</td>\n              <td>{formatPercent(profitPercent([match]))}</td>\n            </tr>\n          );\n        })}\n      </table>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Trades</h3>\n        {this.renderTrades()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { round, Trade } from \"./FileParser\";\nimport { matchTrades } from \"./MatchedTradesTable\";\nimport {\n  accuracy,\n  average,\n  formatCurrency,\n  formatPercent,\n  getWinsAndLosses,\n  plRatio,\n  profitAmount,\n  profitPercent,\n} from \"./metrics\";\n\ninterface Props {\n  trades: Trade[];\n}\nexport default class Performance extends React.Component<Props, {}> {\n  render() {\n    const matches = matchTrades(this.props.trades);\n\n    const avgBuy = average(matches.map((m) => m.buy.price * m.buy.qty));\n\n    return (\n      <div>\n        <h3>Performance</h3>\n        <table className=\"performance\">\n          <tr>\n            <th>Profit ($)</th>\n            <td>{formatCurrency(profitAmount(matches), 2)}</td>\n            <th>Accuracy (%)</th>\n            <td>{formatPercent(accuracy(matches))}</td>\n            <th>Wins </th>\n            <td>{getWinsAndLosses(matches).numWon}</td>\n            <th>Average Position Size ($) </th>\n            <td>{formatCurrency(avgBuy as number)}</td>\n          </tr>\n          <tr>\n            <th>Profit (%)</th>\n            <td>{formatPercent(profitPercent(matches))}</td>\n            <th>P/L Ratio </th>\n            <td>{round(plRatio(matches), 2)}</td>\n            <th>Losses </th>\n            <td>{getWinsAndLosses(matches).numLost}</td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n","import React, { ChangeEvent } from \"react\";\nimport \"./App.css\";\nimport { parseTos, Trade } from \"./FileParser\";\nimport MatchedTradesTable from \"./MatchedTradesTable\";\nimport Performance from \"./Performance\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport moment from \"moment\";\n\ninterface State {\n  dates: [Date, Date] | null;\n  trades: Trade[];\n  showCalendar: boolean;\n}\n\nexport default class App extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      trades: [],\n      dates: null,\n      showCalendar: false,\n    };\n  }\n\n  async onFileChange(e: ChangeEvent<HTMLInputElement>) {\n    if (!e.target.files || e.target.files.length === 0) {\n      return;\n    }\n\n    const file = e.target.files[0];\n    const trades = await parseTos(file);\n    this.setState({ trades });\n  }\n\n  async onDatesChanged(dates: [Date, Date] | null) {\n    this.setState({ dates, showCalendar: false });\n  }\n\n  renderDates() {\n    let dateString = \"Filter by dates\";\n\n    if (this.state.dates) {\n      const startString = moment(this.state.dates[0]).format(\"MMM Do, YYYY\");\n      const endString = moment(this.state.dates[1]).format(\"MMM Do, YYYY\");\n      if (startString === endString) {\n        dateString = startString;\n      } else {\n        dateString = `${startString} - ${endString}`;\n      }\n    }\n    const button = (\n      <button\n        className=\"dates\"\n        onClick={(e) => {\n          this.setState({ showCalendar: !this.state.showCalendar });\n        }}\n      >\n        {dateString}\n        <span\n          className=\"link\"\n          style={{\n            fontSize: \"0.6em\",\n            margin: \"1em\",\n            padding: \"0.25em\",\n            borderRadius: \"0.4em\",\n            background: \"white\",\n          }}\n          onClick={(e) => {\n            e.stopPropagation();\n            this.onDatesChanged(null);\n          }}\n        >\n          Reset\n        </span>\n      </button>\n    );\n    const calendar = this.state.showCalendar ? (\n      <div style={{ position: \"fixed\" }}>\n        <Calendar\n          selectRange={true}\n          maxDate={new Date()}\n          onChange={(date: unknown) =>\n            this.onDatesChanged(date as [Date, Date])\n          }\n          value={this.state.dates}\n        />\n      </div>\n    ) : null;\n\n    return [button, calendar];\n  }\n\n  renderMessage() {\n    if (!this.state.trades.length) {\n      return (\n        <h3>\n          <label htmlFor=\"file\" className=\"link\">\n            Upload a CSV\n          </label>{\" \"}\n          to get started\n        </h3>\n      );\n    }\n  }\n\n  render() {\n    const dateFilteredTrades = this.state.trades.filter(\n      (t) =>\n        this.state.dates === null ||\n        (t.date.getTime() > this.state.dates[0].getTime() &&\n          t.date.getTime() < this.state.dates[1].getTime())\n    );\n    return (\n      <div>\n        <label htmlFor=\"file\" className=\"file\">\n          Upload CSV\n        </label>\n        <input type=\"file\" id=\"file\" onChange={(e) => this.onFileChange(e)} />\n        {this.renderDates()}\n\n        {this.state.trades.length\n          ? [\n              <Performance trades={dateFilteredTrades} />,\n              <MatchedTradesTable trades={dateFilteredTrades} />,\n            ]\n          : this.renderMessage()}\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}